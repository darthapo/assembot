// Generated by CoffeeScript 1.5.0
(function() {
  var addConvertor, addCssConvertor, addJsConvertor, api, fs, path, project_root, type_db, validType, _;

  path = require('path');

  fs = require('fs');

  _ = require('./util');

  project_root = process.cwd();

  type_db = {
    ".js": {
      types: [],
      handlers: {}
    },
    ".css": {
      types: [],
      handlers: {}
    }
  };

  validType = function(target) {
    if (target[0] === '.') {
      return target;
    } else {
      return "." + target;
    }
  };

  module.exports = api = {
    addFor: function(target, type, converter) {
      target = validType(target);
      type = validType(type);
      type_db[target].types.push(type);
      type_db[target].handlers[type] = converter;
      return this;
    },
    validTypeFor: function(target, ext) {
      var type;
      target = validType(target);
      type = validType(ext);
      if (type_db[target] != null) {
        return type_db[target].types.indexOf(type) >= 0;
      } else {
        return false;
      }
    },
    buildSourceFor: function(target, fullpath, info, callback) {
      var converter, ext, source;
      target = validType(target);
      ext = path.extname(fullpath);
      source = fs.readFileSync(fullpath, 'utf8');
      converter = type_db[target].handlers[ext];
      converter(this.replaceTokens(String(source), info), info, callback);
      return this;
    },
    tokenParser: /(\{%\-([ a-zA-Z0-9\._]*)\-%\})/g,
    replaceTokens: function(string, info) {
      if (info.replaceTokens && this.tokenParser.test(string)) {
        return string.replace(this.tokenParser, function(match, token, value, loc, src) {
          var data, key, part, _i, _len, _ref;
          data = info;
          _ref = value.split('.');
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            part = _ref[_i];
            key = part.trim();
            data = data[key];
          }
          return String(data);
        });
      } else {
        return string;
      }
    }
  };

  addConvertor = function(target, type, modules, handler) {
    var args, converter, module, _i, _len;
    try {
      if (!_.isArray(modules)) {
        modules = [modules];
      }
      args = [];
      for (_i = 0, _len = modules.length; _i < _len; _i++) {
        module = modules[_i];
        args.push(_.tryRequireLocalFirst(module));
      }
      converter = handler.apply(handler, args);
      return api.addFor(target, type, converter);
    } catch (ex) {
      return api.addFor(target, type, function() {
        throw "Module(s) '" + (modules.join("'")) + "' cannot be found!";
      });
    }
  };

  addJsConvertor = function(type, modules, handler) {
    return addConvertor('js', type, modules, handler);
  };

  addCssConvertor = function(type, modules, handler) {
    return addConvertor('css', type, modules, handler);
  };

  addJsConvertor('.js', [], function() {
    return function(source, opts, converted) {
      return converted(null, source, opts);
    };
  });

  addJsConvertor('.html', [], function() {
    return function(source, opts, converted) {
      return converted(null, "module.exports=" + (JSON.stringify(source)) + ";", opts);
    };
  });

  addJsConvertor('.coffee', 'coffee-script', function(coffee) {
    return function(source, opts, converted) {
      var output, _ref;
      opts = opts.coffee || {};
      if ((_ref = opts.bare) == null) {
        opts.bare = true;
      }
      output = coffee.compile(source, opts);
      return converted(null, output, opts);
    };
  });

  addJsConvertor('.litcoffee', 'coffee-script', function(coffee) {
    return function(source, opts, converted) {
      var output, _ref, _ref1;
      opts = opts.coffee || {};
      if ((_ref = opts.bare) == null) {
        opts.bare = true;
      }
      if ((_ref1 = opts.literate) == null) {
        opts.literate = true;
      }
      output = coffee.compile(source, opts);
      return converted(null, output, opts);
    };
  });

  addJsConvertor('.eco', 'eco', function(eco) {
    return function(source, opts, converted) {
      var output;
      output = eco.precompile(source);
      return converted(null, output, opts);
    };
  });

  addJsConvertor('.json', [], function() {
    return function(source, opts, converted) {
      var data;
      data = JSON.parse(source);
      return converted(null, "module.exports= " + (JSON.stringify(data)) + ";", opts);
    };
  });

  addCssConvertor('.css', [], function() {
    return function(source, opts, converted) {
      return converted(null, source, opts);
    };
  });

  addCssConvertor('.less', 'less', function(less) {
    return function(source, opts, converted) {
      var output;
      output = less.precompile(source);
      return converted(null, output, opts);
    };
  });

  addCssConvertor('.styl', ['stylus', 'nib'], function(stylus, nib) {
    return function(source, opts, converted) {
      return stylus(source).set('filename', opts.filename || 'generated.css').set('paths', [opts.loadpath]).use(nib).render(function(err, css) {
        if (err != null) {
          return converted(err, null, opts);
        } else {
          return converted(null, css, opts);
        }
      });
    };
  });

}).call(this);
