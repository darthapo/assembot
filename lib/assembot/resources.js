// Generated by CoffeeScript 1.6.1
(function() {
  var EventEmitter, Resource, ResourceList, fs, path, processor, _,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  path = require('path');

  fs = require('fs');

  _ = require('./util');

  EventEmitter = require('events').EventEmitter;

  processor = require('./processor');

  Resource = (function() {

    function Resource(filepath, content) {
      this.filepath = filepath;
      this.content = content;
      this.disable = false;
      this.ext = path.extname(this.filepath);
      this.type = this.ext.slice(1);
      this.target = processor.targetOf(this.filepath);
      this.path = this.filepath.replace(this.ext, '');
    }

    Resource.fromFile = function(filename, callback) {
      return fs.readFile(filepath, function(err, contents) {
        var res;
        if (err == null) {
          res = new Resource(filename, contents.toString());
        }
        return callback(err, res);
      });
    };

    return Resource;

  })();

  /*
    Callback: (err, resources, resourceList)->
  */


  ResourceList = (function(_super) {

    __extends(ResourceList, _super);

    function ResourceList(source, didLoadCallback) {
      var _this = this;
      this.source = source;
      this.didLoadCallback = didLoadCallback;
      this.fileDidLoad = function(err, filepath, contents) {
        return ResourceList.prototype.fileDidLoad.apply(_this, arguments);
      };
      this._addFileset = function(err, files) {
        return ResourceList.prototype._addFileset.apply(_this, arguments);
      };
      this.source = path.resolve(this.source);
      this.tree = null;
      this.errors = null;
      this.length = 0;
      this.ready = false;
      this._loadCount = 0;
      if (this.didLoadCallback != null) {
        this.scan(this.didLoadCallback);
      }
    }

    ResourceList.prototype.each = function(callback) {
      var i, key, resource, _ref;
      i = 0;
      _ref = this.tree;
      for (key in _ref) {
        resource = _ref[key];
        callback(resource, i++);
      }
      return this;
    };

    ResourceList.prototype.eachForTarget = function(target, callback) {
      var i, key, resource, _ref;
      i = 0;
      _ref = this.tree;
      for (key in _ref) {
        resource = _ref[key];
        if (resource.target === target) {
          callback(resource, i++);
        }
      }
      return this;
    };

    ResourceList.prototype.scan = function(callback) {
      if (callback != null) {
        this.didLoadCallback = callback;
      }
      this.ready = false;
      this.tree = {};
      this.errors = [];
      this.length = 0;
      this._loadCount = 0;
      _.walk(this.source, this._addFileset);
      return this;
    };

    ResourceList.prototype.rescan = ResourceList.prototype.scan;

    ResourceList.prototype._addFileset = function(err, files) {
      var _this = this;
      if (err != null) {
        this.didLoadCallback(err, null);
        this.emit('error', err);
        return;
      }
      this.length = 0;
      files.forEach(function(filepath) {
        var callback;
        if (processor.validTarget(filepath)) {
          _this.length++;
          callback = _this.fileDidLoad;
          return fs.readFile(filepath, function(err, contents) {
            return callback(err, filepath, contents.toString());
          });
        }
      });
      return this;
    };

    ResourceList.prototype.fileDidLoad = function(err, filepath, contents) {
      var error, res;
      this._loadCount += 1;
      if (err != null) {
        this.errors.push(err);
      } else {
        res = new Resource(this.getSourcePathFor(filepath), contents);
        if (this.tree[res.path] != null) {
          _.puts("Warning: redefining module '" + res.path + "'");
        }
        this.tree[res.path] = res;
      }
      if (this._loadCount === this.length) {
        this.ready = true;
        error = null;
        if (this.errors.length > 0) {
          error = new Error("ResourceList: Load Errors");
          error.errors = this.errors;
          this.emit('error', error);
        }
        this.emit('load', {
          errors: error,
          tree: this.tree,
          list: this
        });
        this.emit('ready');
        if (this.didLoadCallback != null) {
          return this.didLoadCallback(error, this.tree, this);
        }
      }
    };

    ResourceList;

    ResourceList.prototype.getSourcePathFor = function(fullpath) {
      return fullpath.replace("" + this.source + path.sep, '');
    };

    ResourceList.scan = function(source, callback) {
      return new ResourceList(source, callback);
    };

    return ResourceList;

  })(EventEmitter);

  module.exports = {
    Resource: Resource,
    ResourceList: ResourceList
  };

}).call(this);
