// Generated by CoffeeScript 1.6.1
(function() {
  var Bot, Processor, ProcessorManager, Resource, ResourceList, addPackager, addProcessor, after, before, context, defaults, extend, ident, init, initialized, lastLibName, load, loadPlugin, log, notify, processor, render, replaceTokens, shelljs, targetOf, transpile, tryRequire, tryRequireAll, tryRequireResolve, type, validTarget, _, _ref, _ref1, _ref2, _registry,
    __slice = [].slice;

  log = require('./log');

  notify = require('./notify');

  shelljs = require('shelljs');

  Bot = require('./bot').Bot;

  addPackager = require('./packager').addPackager;

  _ref = require('./resources'), ResourceList = _ref.ResourceList, Resource = _ref.Resource;

  _ref1 = _ = require('./util'), extend = _ref1.extend, defaults = _ref1.defaults, type = _ref1.type, tryRequire = _ref1.tryRequire, tryRequireAll = _ref1.tryRequireAll, tryRequireResolve = _ref1.tryRequireResolve;

  _ref2 = processor = require('./processor'), targetOf = _ref2.targetOf, validTarget = _ref2.validTarget, render = _ref2.render, transpile = _ref2.transpile, replaceTokens = _ref2.replaceTokens, addProcessor = _ref2.addProcessor, Processor = _ref2.Processor, ProcessorManager = _ref2.ProcessorManager;

  before = Bot.before, after = Bot.after;

  loadPlugin = load;

  context = {
    before: before,
    after: after,
    log: log,
    extend: extend,
    defaults: defaults,
    processor: processor,
    addProcessor: addProcessor,
    addPackager: addPackager,
    type: type,
    tryRequire: tryRequire,
    tryRequireAll: tryRequireAll,
    tryRequireResolve: tryRequireResolve,
    loadPlugin: loadPlugin,
    shelljs: shelljs,
    Bot: Bot,
    Resource: Resource,
    ResourceList: ResourceList,
    Processor: Processor,
    ProcessorManager: ProcessorManager
  };

  context.on = Bot.on;

  initialized = false;

  _registry = {};

  lastLibName = null;

  init = function() {
    var options, plugin, preload, _i, _len;
    options = arguments[0], preload = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (initialized) {
      return false;
    }
    if (options.callback != null) {
      options.callback.call(context, context);
    }
    if ((options.plugins != null) && type(options.plugins) === 'array') {
      preload = preload.concat(options.plugins);
    }
    for (_i = 0, _len = preload.length; _i < _len; _i++) {
      plugin = preload[_i];
      load(plugin);
    }
    initialized = true;
    return false;
  };

  ident = function(name) {
    log.info(" =D-- " + name);
    return lastLibName = name;
  };

  load = function(name) {
    return tryRequire(name, function(err, lib) {
      if (err != null) {
        return log.error("Failure to load plugin " + name, err);
      }
      lib.call(context, context, ident);
      if (lastLibName !== null) {
        _registry[lastLibName] = lib;
        lastLibName = null;
      }
      return notify.emit('plugin:loaded', name, lib);
    });
  };

  module.exports = {
    init: init,
    load: load,
    context: context
  };

}).call(this);
