// Generated by CoffeeScript 1.5.0
(function() {
  var EventEmitter, Notify, log, notifications,
    __slice = [].slice;

  log = require('./log');

  EventEmitter = require('events').EventEmitter;

  Notify = (function() {

    function Notify() {
      this.vent = new EventEmitter;
    }

    Notify.prototype.on = function(event, listener) {
      return this.vent.on(event, listener);
    };

    Notify.prototype.emit = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.vent).emit.apply(_ref, args);
    };

    Notify.prototype.createBot = function(bot) {
      return this.vent.emit('create:bot', bot);
    };

    Notify.prototype.beforeBuild = function(bot) {
      return this.vent.emit('before:build', bot);
    };

    Notify.prototype.beforeScan = function(bot) {
      return this.vent.emit('before:scan', bot);
    };

    Notify.prototype.afterScan = function(bot) {
      this.vent.emit('after:scan', bot);
      return this.vent.emit('scan', bot);
    };

    Notify.prototype.beforeRender = function(bot) {
      return this.vent.emit('before:render', bot);
    };

    Notify.prototype.beforeRenderItem = function(resource) {
      return this.vent.emit('before:renderItem', resource);
    };

    Notify.prototype.afterRenderItem = function(resource) {
      this.vent.emit('after:renderItem', resource);
      return this.vent.emit('renderItem', resource);
    };

    Notify.prototype.afterRender = function(bot) {
      this.vent.emit('after:render', bot);
      return this.vent.emit('render', bot);
    };

    Notify.prototype.beforeAssemble = function(bot) {
      return this.vent.emit('before:assemble', bot);
    };

    Notify.prototype.afterAssemble = function(bot) {
      this.vent.emit('after:assemble', bot);
      return this.vent.emit('assemble', bot);
    };

    Notify.prototype.afterBuild = function(bot) {
      this.vent.emit('after:build', bot);
      return this.vent.emit('build', bot);
    };

    Notify.prototype.beforeWrite = function(bot) {
      return this.vent.emit('before:write', bot);
    };

    Notify.prototype.afterWrite = function(bot) {
      this.vent.emit('after:write', bot);
      return this.vent.emit('write', bot);
    };

    Notify.prototype.createServer = function(server, opts) {
      return this.vent.emit('create:server', server, opts);
    };

    Notify.prototype.startServer = function(server, opts) {
      return this.vent.emit('start:server', server, opts);
    };

    return Notify;

  })();

  notifications = new Notify;

  module.exports = notifications;

}).call(this);
