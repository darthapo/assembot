// Generated by CoffeeScript 1.5.0

/*
 AssemBot CLI!
*/


(function() {
  var builder, defaults, fs, optparse, path, server, _;

  path = require('path');

  fs = require('fs');

  _ = require('./util');

  builder = require('./builder');

  server = require('./server');

  defaults = require('./defaults');

  optparse = require('optparse');

  module.exports = {
    run: function() {
      var assbot_conf, assembot_info, command, empty, nfo, options, parser, project_root;
      command = 'help';
      project_root = process.cwd();
      options = _.extend({}, defaults.options);
      assembot_info = require('../package');
      parser = new optparse.OptionParser([['-b', '--build', 'Run build'], ['-s', '--serve', 'Run dev server'], ['-f', '--files', 'Shows the build targets and associated files'], ['-d', '--debug', 'Shows internal build config data'], ['-p', '--port [PORT]', "Set dev server port"], ['-r', '--root [PATH]', 'Set dev server root path'], ['-m', '--minify [LEVEL]', 'Force minification 0=none 1=minify 2=mangle'], ['-c', '--modules', 'Shows the commonjs modules for .js build targets'], ['-v', '--version', 'Shows version number'], ['-h', '--help', 'Shows help']]);
      parser.banner = 'Usage: assembot [options]';
      parser.on('build', function(name, value) {
        return command = name;
      });
      parser.on('help', function(name, value) {
        return command = name;
      });
      parser.on('debug', function(name, value) {
        return command = name;
      });
      parser.on('files', function(name, value) {
        return command = name;
      });
      parser.on('minify', function(name, value) {
        return options.minify = parseInt(value || "1");
      });
      parser.on('modules', function(name, value) {
        return command = name;
      });
      parser.on('port', function(name, value) {
        return options.port = value;
      });
      parser.on('serve', function(name, value) {
        return command = name;
      });
      parser.on('version', function(name, value) {
        return command = name;
      });
      parser.on('root', function(name, value) {
        var newRoot;
        newRoot = path.resolve(value);
        if (fs.existsSync(newRoot)) {
          return options.wwwRoot = newRoot;
        } else {
          return _.log("Not a valid path: " + newRoot);
        }
      });
      parser.on('*', function(name, value) {
        return _.puts("Unknown option: " + name);
      });
      parser.parse(process.argv);
      nfo = (function() {
        try {
          return require("" + project_root + path.sep + "package");
        } catch (ex) {
          console.log("No 'package.json' file found, using defaults!");
          return empty = {
            assembot: _.extend({}, defaults.assembot)
          };
        }
      })();
      assbot_conf = nfo.assembot == null ? (console.log("No 'assembot' block in your package.json file found, using defaults!"), _.extend({}, defaults.assembot)) : nfo.assembot;
      if (command === 'serve') {
        return server.serve(assbot_conf, options);
      } else if (command === 'build') {
        return builder.build(assbot_conf, options);
      } else if (command === 'files') {
        return builder.displayTargetTree(assbot_conf, options);
      } else if (command === 'modules') {
        return builder.displayModuleTree(assbot_conf, options);
      } else if (command === 'debug') {
        builder.prepConfig(assbot_conf, options);
        return _.pp(assbot_conf);
      } else if (command === 'version') {
        return _.puts(assembot_info.version);
      } else {
        _.puts("ASSEMBOT! Bleep, bloop!\nv" + assembot_info.version + "\n");
        return _.puts(parser.toString());
      }
    }
  };

}).call(this);
