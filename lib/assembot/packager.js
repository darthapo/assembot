// Generated by CoffeeScript 1.6.1
(function() {
  var css_package, ecss_wrapper, js_package;

  css_package = function(resources, options, callback) {
    var results;
    results = "";
    resources.eachForTarget('css', function(res) {
      results += "/* " + res.path + " */\n";
      results += res.content;
      return results += "\n\n";
    });
    return callback(null, results);
  };

  exports.css = css_package;

  ecss_wrapper = function(css) {
    return "var node = null, css = " + (JSON.stringify(css)) + ";\nmodule.exports= {\n  content: css,\n  isActive: function(){ return node != null; },\n  activate: function(to){\n    if(node != null) return; // Already added to DOM!\n    to= to || document.getElementsByTagName('HEAD')[0] || document.body || document; // In the HEAD or BODY tags\n    node= document.createElement('style');\n    node.innerHTML= css;\n    to.appendChild(node);\n    return this;\n  },\n  deactivate: function() {\n    if(node != null) {\n      node.parentNode.removeChild(node);\n      node = null;\n    }\n    return this;\n  }\n};";
  };

  exports.embedded_css = ecss_wrapper;

  js_package = function(resources, options, callback) {
    var autoStart, identifier, result, _ref, _ref1;
    identifier = (_ref = options.ident) != null ? _ref : 'require';
    autoStart = (_ref1 = options.autoStart) != null ? _ref1 : false;
    result = "(function(/*! Stitched by Assembot !*/) {\n  /* \n    The commonjs code below was based on @sstephenson's stitch.\n    https://github.com/sstephenson/stitch\n  */\n  if (!this." + identifier + ") {\n    var modules = {}, cache = {}, moduleList= function(startingWith) {\n      var names= [], startingWith= startingWith || '';\n      for( var name in modules ) {\n        if(name.indexOf(startingWith) === 0) names.push(name);\n      }\n      return names;\n    }, require = function(name, root) {\n      var path = expand(root, name), module = cache[path], fn;\n      if (module) {\n        return module.exports;\n      } else if (fn = modules[path] || modules[path = expand(path, './index')]) {\n        module = {id: path, exports: {}};\n        try {\n          cache[path] = module;\n          var localRequire= function(name) {\n            return require(name, dirname(path));\n          }\n          localRequire.modules= moduleList;\n          fn(module.exports, localRequire, module);\n          return module.exports;\n        } catch (err) {\n          delete cache[path];\n          throw err;\n        }\n      } else {\n        throw 'module \\'' + name + '\\' not found';\n      }\n    }, expand = function(root, name) {\n      var results = [], parts, part;\n      if (/^\\.\\.?(\\/|$)/.test(name)) {\n        parts = [root, name].join('/').split('/');\n      } else {\n        parts = name.split('/');\n      }\n      for (var i = 0, length = parts.length; i < length; i++) {\n        part = parts[i];\n        if (part == '..') {\n          results.pop();\n        } else if (part != '.' && part != '') {\n          results.push(part);\n        }\n      }\n      return results.join('/');\n    }, dirname = function(path) {\n      return path.split('/').slice(0, -1).join('/');\n    };\n    this." + identifier + " = function(name) {\n      return require(name, '');\n    }\n    this." + identifier + ".define = function(bundle) {\n      for (var key in bundle)\n        modules[key] = bundle[key];\n    };\n    this." + identifier + ".modules= moduleList;\n  }\n  return this." + identifier + ".define;\n}).call(this)({\n";
    resources.eachForTarget('js', function(res, i) {
      result += i === 0 ? "" : ",\n";
      result += JSON.stringify(res.path);
      return result += ": function(exports, require, module) {\n" + res.content + "\n}";
    });
    result += "});\n";
    if (autoStart) {
      result += "" + identifier + "('" + autoStart + "');\n";
    }
    return callback(null, result);
  };

  exports.js = js_package;

}).call(this);
