// Generated by CoffeeScript 1.6.1
(function() {
  var cat, defaults, loadOptions, log, path, test, _, _ref;

  require('coffee-script');

  _ = require('../util');

  log = require('../log');

  defaults = require('../defaults');

  path = require('path');

  _ref = require('shelljs'), test = _ref.test, cat = _ref.cat;

  loadOptions = require('../index').loadOptions;

  module.exports = function(cli, pkg, init_logging) {
    return cli.command('init').description('Creates a configuration file, if missing').action(function() {
      var check_local_options, choose_your_fate, init_settings, localOptions, target_files;
      init_logging();
      localOptions = loadOptions(false);
      check_local_options = function() {
        if (localOptions != null) {
          localOptions = "" + localOptions + ".json";
          log.say("Bzrk!\n");
          log.say("   ./" + localOptions + " already has AssemBot settings defined!\n");
          return cli.prompt("Would you like to continue? (Y/n) ", function(answer) {
            if (String(answer).toLowerCase().trim().indexOf('n') === 0) {
              log.say("Bzzt. Canceled.");
              return process.stdin.destroy();
            } else {
              log.say("\nAlright, but don't say I didn't warn you!\n");
              return choose_your_fate();
            }
          });
        } else {
          return choose_your_fate();
        }
      };
      target_files = 'package.json component.json build.json assembot.json'.split(' ');
      choose_your_fate = function() {
        var filename, options, _i, _len;
        options = [];
        for (_i = 0, _len = target_files.length; _i < _len; _i++) {
          filename = target_files[_i];
          if (test('-f', path.resolve("./" + filename))) {
            if (localOptions === filename) {
              options.push("" + filename + "* (merge - has AssemBot settings already)");
            } else {
              options.push("" + filename + " (merge)");
            }
          } else {
            options.push("" + filename + " (create)");
          }
        }
        options.push("Cancel operation");
        log.say('Where shall I put the configuration?');
        return cli.choose(options, function(i) {
          if (i === 4) {
            log.say("Bzzt. Canceled.");
          } else {
            log.say('You chose %d "%s"', i + 1, options[i]);
            init_settings(i);
            log.say("");
            log.say("You were eaten by a grue.");
            log.say("Just kidding. Robot humor. Ha. Ha.");
            log.say("The operation completed successfully.");
            log.say("");
            log.say("Done.");
          }
          return process.stdin.destroy();
        });
      };
      init_settings = function(i) {
        var filename, filepath, output, settings;
        filename = "./" + target_files[i];
        filepath = path.resolve(filename);
        settings = {};
        log.say("");
        if (test('-e', filepath)) {
          log.say("OK, merging " + filename);
          settings = JSON.parse(cat(filepath));
        } else {
          if (filename === './package.json') {
            settings = {
              name: path.basename(process.cwd()),
              version: "1.0.0",
              license: "",
              description: "",
              author: ""
            };
          }
          log.say("OK, creating " + filename);
        }
        settings.assembot = _.defaults({}, settings.assembot || {}, defaults);
        output = JSON.stringify(settings, null, 2);
        log.debug("Writing:");
        log.debug(output);
        return output.to(filepath);
      };
      return check_local_options();
    });
  };

}).call(this);
