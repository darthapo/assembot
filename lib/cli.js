// Generated by CoffeeScript 1.5.0

/*
 AssemBot CLI!
*/


(function() {
  var builder, defaults, optparse, path, server, _;

  path = require('path');

  _ = require('./util');

  builder = require('./builder');

  server = require('./server');

  defaults = require('./defaults');

  optparse = require('optparse');

  module.exports = {
    run: function() {
      var assbot_conf, assembot_info, command, empty, nfo, options, parser, project_root;
      command = 'help';
      project_root = process.cwd();
      options = _.extend({}, defaults.options);
      assembot_info = require('../package');
      parser = new optparse.OptionParser([['-b', '--build', 'Run build'], ['-s', '--serve', 'Run dev server'], ['-p', '--port [PORT]', "Set dev server port"], ['-v', '--version', 'Shows version number'], ['-h', '--help', 'Shows help'], ['-m', '--minify [LEVEL]', 'Force minification 0=none 1=minify 2=mangle']]);
      parser.banner = 'Usage: assembot [options]';
      parser.on('build', function(name, value) {
        return command = name;
      });
      parser.on('help', function(name, value) {
        return command = name;
      });
      parser.on('serve', function(name, value) {
        return command = name;
      });
      parser.on('port', function(name, value) {
        return options.port = value;
      });
      parser.on('minify', function(name, value) {
        return options.minify = parseInt(value || "1");
      });
      parser.on('version', function(name, value) {
        return command = name;
      });
      parser.on('*', function(name, value) {
        return _.puts("Unknown option: " + name);
      });
      parser.parse(process.argv);
      nfo = (function() {
        try {
          return require("" + project_root + path.sep + "package");
        } catch (ex) {
          console.log("No 'package.json' file found, using defaults!");
          return empty = {
            assembot: defaults.assembot
          };
        }
      })();
      assbot_conf = nfo.assembot == null ? (console.log("No 'assembot' block in your package.json file found, using defaults!"), defaults.assembot) : nfo.assembot;
      assbot_conf["package"] = nfo;
      assbot_conf.assembot = assembot_info;
      assbot_conf.options = options;
      if (command === 'serve') {
        return server.serve(assbot_conf, options);
      } else if (command === 'build') {
        return builder.build(assbot_conf, options);
      } else if (command === 'version') {
        return _.puts(assembot_info.version);
      } else {
        _.puts("ASSEMBOT! Bleep, bloop!\nv" + assembot_info.version + "\n");
        return _.puts(parser.toString());
      }
    }
  };

}).call(this);
