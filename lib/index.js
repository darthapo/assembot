// Generated by CoffeeScript 1.6.1
(function() {
  var Bot, assembler, assembot, defaults, loadFirstLocalPackage, loadOptions, loadTargets, loadedFrom, log, packager, path, plugins, processor, project_root, resourcelist, _,
    __slice = [].slice;

  require('coffee-script');

  log = require('./log');

  defaults = require('./defaults');

  _ = require('./util');

  path = require('path');

  packager = require('./packager');

  plugins = require('./plugins');

  processor = require('./processor');

  project_root = process.cwd();

  resourcelist = require('./resources').resourcelist;

  assembler = require('./assembler').assembler;

  Bot = require('./bot').Bot;

  loadedFrom = null;

  loadFirstLocalPackage = function() {
    var data, name, names, _i, _len;
    names = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = names.length; _i < _len; _i++) {
      name = names[_i];
      try {
        data = require("" + project_root + path.sep + name);
        if (data.assembot != null) {
          loadedFrom = name;
          return data.assembot;
        } else {
          throw new Error("No Assembot block");
        }
      } catch (ex) {
        log.debug("No '" + name + ".json' file found!");
      }
    }
    loadedFrom = 'defaults';
    return defaults;
  };

  loadTargets = function(options) {
    var nfo, opts, src_targets, targets, tgt, tgt_opts, _ref, _ref1;
    nfo = options != null ? options : loadFirstLocalPackage('package', 'component', 'build', 'assembot');
    options = (_ref = nfo.options) != null ? _ref : defaults.options;
    src_targets = (_ref1 = nfo.targets) != null ? _ref1 : defaults.targets;
    targets = {};
    for (tgt in src_targets) {
      opts = src_targets[tgt];
      tgt_opts = _.defaults({}, opts, options, defaults.options);
      targets[tgt] = tgt_opts;
    }
    return targets;
  };

  loadOptions = function(returnDefaults) {
    var nfo, _ref;
    nfo = loadFirstLocalPackage('package', 'component', 'build', 'assembot');
    if (returnDefaults === false) {
      if (nfo === defaults) {
        return null;
      } else {
        return loadedFrom;
      }
    } else {
      return (_ref = nfo.options) != null ? _ref : defaults.options;
    }
  };

  assembot = function(target, options) {
    if (options == null) {
      options = {};
    }
    plugins.init(options, './plugins/header', './plugins/minify', './plugins/prune', './plugins/settee-templates');
    return new Bot(target, options);
  };

  module.exports = {
    assembot: assembot,
    defaults: defaults,
    assembler: assembler,
    resourcelist: resourcelist,
    loadTargets: loadTargets,
    packager: packager,
    processor: processor,
    loadedFrom: loadedFrom,
    loadOptions: loadOptions,
    loadFirstLocalPackage: loadFirstLocalPackage,
    _: _
  };

}).call(this);
