// Generated by CoffeeScript 1.6.1
(function() {
  var Bot, assembler, bot, defaults, echo, fs, log, notify, packager, path, processor, resourcelist, _,
    _this = this;

  _ = require('./util');

  fs = require('fs');

  path = require('path');

  defaults = require('./defaults');

  log = require('./log');

  packager = require('./packager');

  processor = require('./processor');

  notify = require('./notify');

  echo = require('shelljs').echo;

  assembler = require('./assembler').assembler;

  resourcelist = require('./resources').resourcelist;

  Bot = (function() {

    Bot.vent = notify;

    Bot.on = function(event, listener) {
      return notify.on(event, listener);
    };

    Bot.before = function(event, listener) {
      return notify.on("before:" + event, listener);
    };

    Bot.after = function(event, listener) {
      return notify.on("after:" + event, listener);
    };

    function Bot(output, options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      this.didAssemble = function(err, content) {
        _this.content = content;
        return Bot.prototype.didAssemble.apply(_this, arguments);
      };
      this.didRender = function(err) {
        return Bot.prototype.didRender.apply(_this, arguments);
      };
      if (output != null) {
        options.output = output;
      }
      this.options = {};
      this.config(options);
      this.built = false;
      this.returnContent = null;
      this.userCallbackForCompletion = null;
      notify.createBot(this);
    }

    Bot.prototype.config = function(options) {
      if (options == null) {
        options = {};
      }
      this.options = _.defaults(options, this.options, defaults.options);
      this.output = path.resolve(this.options.output);
      this.source = path.resolve(this.options.source);
      this.target = processor.targetOf(this.output);
      return this;
    };

    Bot.prototype.build = function(callback) {
      this.returnContent = callback != null ? callback : null;
      notify.beforeBuild(this);
      notify.beforeScan(this);
      this.resources = resourcelist(this.source);
      notify.afterScan(this);
      notify.beforeRender(this);
      processor.render(this.resources.forTarget(this.target), this.options, this.didRender);
      return this;
    };

    Bot.prototype.then = function(callback) {
      this.userCallbackForCompletion = callback;
      if (this.built) {
        if (typeof this.userCallbackForCompletion === "function") {
          this.userCallbackForCompletion();
        }
      }
      return this;
    };

    Bot.prototype.didRender = function(err) {
      if (err != null) {
        throw err;
      }
      notify.afterRender(this);
      notify.beforeAssemble(this);
      return assembler(this.target, this.resources.forTarget(this.target), this.options, this.didAssemble);
    };

    Bot.prototype.didAssemble = function(err, content) {
      this.content = content;
      if (err != null) {
        throw err;
      }
      notify.afterAssemble(this);
      return this.writeContent();
    };

    Bot.prototype.writeContent = function() {
      notify.afterBuild(this);
      notify.beforeWrite(this);
      if (this.returnContent != null) {
        log.info("Returning content to callback", path.relative(process.cwd(), this.output));
        this.returnContent(this.content);
        return typeof this.userCallbackForCompletion === "function" ? this.userCallbackForCompletion() : void 0;
      } else {
        log.info("Writing", path.relative(process.cwd(), this.output));
        this.content.to(this.output);
        notify.afterWrite(this);
        this.built = true;
        return typeof this.userCallbackForCompletion === "function" ? this.userCallbackForCompletion() : void 0;
      }
    };

    Bot.prototype.rebuild = Bot.prototype.build;

    Bot.prototype.flush = function() {
      delete this.resources;
      delete this.content;
      return this.built = false;
    };

    return Bot;

  })();

  bot = function(output, options) {
    return new Bot(output, options);
  };

  module.exports = {
    Bot: Bot,
    bot: bot
  };

}).call(this);
