// Generated by CoffeeScript 1.6.1
(function() {
  var build_project, cat, cd, content, defaults, exec, loadOptions, log, mkdir, path, spawn, test, _, _ref;

  require('coffee-script');

  _ = require('../util');

  log = require('../log');

  defaults = require('../defaults');

  path = require('path');

  spawn = require('child_process').spawn;

  _ref = require('shelljs'), test = _ref.test, cat = _ref.cat, cd = _ref.cd, mkdir = _ref.mkdir, exec = _ref.exec;

  loadOptions = require('../index').loadOptions;

  build_project = function(name) {
    var create_dir, create_file, projectpath, settings, t, v, _ref1;
    projectpath = path.resolve("./" + name);
    if (test('-e', projectpath)) {
      return log.say("" + name + " already exists at this location!");
    } else {
      log.say("create: " + name);
      mkdir(projectpath);
      cd(projectpath);
      create_dir = function(filepath) {
        log.say("create: " + name + "/" + filepath);
        return mkdir(filepath);
      };
      create_file = function(filepath, contentName) {
        log.say("create: " + name + "/" + filepath);
        return String(content[contentName]).replace(/APPNAME/g, name).to(filepath);
      };
      create_dir("source");
      create_file("source/main.coffee", 'mainCoffee');
      create_file("source/main.styl", 'mainStylus');
      create_dir("public");
      create_file("public/index.html", 'indexHtml');
      create_dir("docs");
      create_file("docs/ideas.md", 'ideas');
      create_file("docs/todos.md", 'todos');
      create_dir("test");
      create_dir("test/fixtures");
      create_file("test/mocha.opts", 'mochaOpts');
      create_file("test/helpers.coffee", 'testHelpers');
      create_file("test/test_app.coffee", 'projectTest');
      create_file(".gitignore", 'gitIgnore');
      create_file("Makefile", 'makefile');
      create_file("readme.md", 'readme');
      settings = {
        name: name,
        version: "1.0.0",
        license: "",
        description: "",
        author: "",
        assembot: defaults,
        devDependencies: {
          assembot: "*",
          "coffee-script": "*",
          mocha: "*",
          chai: "*"
        }
      };
      _ref1 = settings.assembot.targets;
      for (t in _ref1) {
        v = _ref1[t];
        if (t.indexOf('.js') > 0) {
          v.autoLoad = "main";
        }
      }
      content.packageJSON = JSON.stringify(settings, null, 2);
      create_file("package.json", 'packageJSON');
      exec("npm install");
      log.say("");
      log.say("OK, you can have fun!");
      log.say("");
      log.say("   cd " + name);
      log.say("");
      return log.say("Done!");
    }
  };

  content = {
    readme: "# APPNAME\n\n## Remember\n\nIf you're having problems compiling or testing, you might need to run:\n\n    npm install\n\nAnd yeah, you should probably delete all this and say a few words about APPNAME here.",
    mainCoffee: "# APPNAME main\n\nthis.onload= ->\n  console.log \"Ready.\"\n  document.body.innerHTML= \"Ready.\"\n",
    mainStylus: "// APPNAME\n@import 'nib'\n\nglobal-reset()\n\nbody\n  font-family \"Helvetica Neue\", Helvetica, Sans-Serif",
    ideas: "# APPNAME Ideas\n\n- Do cool stuff!",
    todos: "# APPNAME Todos\n\n- Write docs\n- Flesh out readme.md\n- Release APPNAME!",
    indexHtml: "<!DOCTYPE html>\n<html lang=\"en\"  class=\"nojs\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>APPNAME</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"app.css\">\n  </head>\n  <body>\n    Loading...\n  </body>\n  <script src=\"app.js\"></script>\n</html>",
    mochaOpts: "--ignore-leaks\n--compilers coffee:coffee-script\n--reporter spec\n--require coffee-script\n--require test/helpers.coffee\n--colors",
    testHelpers: "# Insert your test helpers here...",
    projectTest: "should= require('chai').should()\n# this is the compiled output from assembot, \n# use it like you would the 'window' object:\nbuildenv= require('../public/app')\n\ndescribe 'APPNAME', ->\n  #beforeEach ->\n  #afterEach ->\n\n  it 'should exist', ->\n    should.exist buildenv\n\n  it 'should contain the module loader', ->\n    buildenv.require.should.exist\n    buildenv.require.should.be.a.function\n\n  describe 'main', ->\n\n    it 'should exist', ->\n      main= buildenv.require('main')\n      should.exist main",
    gitIgnore: "node_modules",
    makefile: "build:\n\t./node_modules/.bin/assembot build\n\ntest:\n\t@NODE_ENV=test\n\t@clear\n\t@./node_modules/.bin/mocha\n\n.PHONY: build test\n"
  };

  module.exports = function(cli, pkg) {
    return cli.command('new').description("project directory name").action(function(name) {
      if (process.argv.length < 4) {
        log.say("I am an advanced Bot, yes. But my telepathic circuits aren't ready yet.\n");
        log.say("Please enter a project name!");
        return;
      }
      return build_project(name);
    });
  };

}).call(this);
