// Generated by CoffeeScript 1.6.1
(function() {
  var assembot, build_middleware, express, fs, loadOptions, log, notify, path, project_root, test, _, _ref;

  _ = require('./util');

  fs = require('fs');

  log = require('./log');

  path = require('path');

  express = require('express');

  notify = require('./notify');

  test = require('shelljs').test;

  _ref = require('./index'), assembot = _ref.assembot, loadOptions = _ref.loadOptions;

  project_root = process.cwd();

  build_middleware = function(bots, config) {
    var bot, bot_by_path, bot_for, paths, _i, _len;
    paths = config.paths;
    bot_by_path = {};
    for (_i = 0, _len = bots.length; _i < _len; _i++) {
      bot = bots[_i];
      bot_by_path[bot.output] = bot;
    }
    bot_for = function(url) {
      var filepath, localpath, uri, _j, _len1;
      for (filepath = _j = 0, _len1 = paths.length; _j < _len1; filepath = ++_j) {
        uri = paths[filepath];
        localpath = path.resolve(path.join(filepath, url));
        if (bot = bot_by_path[localpath]) {
          return bot;
        }
      }
      return false;
    };
    return function(req, res, next) {
      var url, _ref1;
      url = (_ref1 = req.url) != null ? _ref1.slice(1) : void 0;
      if (bot = bot_for(url)) {
        log.info("Rebuilding:", bot.target);
        return bot.build(function(content) {
          var contentType;
          contentType = (function() {
            switch (bot.target) {
              case 'js':
                return 'application/javascript';
              case 'css':
                return 'text/css';
              default:
                return 'text/html';
            }
          })();
          res.set('Content-Type', contentType);
          return res.send(200, content);
        });
      } else {
        return next();
      }
    };
  };

  exports.start = function(bots, options) {
    var app, conf, filepath, uri, _ref1;
    log.debug("Configuration");
    conf = options.http;
    app = express();
    log.debug(conf);
    log.info("Serving", bots.length, "packages...");
    notify.createServer(app, options);
    app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
    app.use(express.logger());
    app.use(build_middleware(bots, conf));
    log.info("Mounting paths:");
    _ref1 = conf.paths;
    for (uri in _ref1) {
      filepath = _ref1[uri];
      log.info("  " + uri + " -> " + filepath);
      app.use(uri, express["static"](filepath));
    }
    notify.startServer(app, options);
    app.listen(conf.port);
    return log.info(" Ready! Visit http://127.0.0.1:" + conf.port);
  };

}).call(this);
